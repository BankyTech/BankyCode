Certainly. Here's a professionally structured email you can send to GitLab Support:


---

Subject: Incorrect File Change Detection and Missing Changes During Merge Requests – GitLab UI & Local Merge Conflicts

Dear GitLab Support Team,

I hope you are doing well.

We are facing a couple of critical issues related to GitLab merge requests and cherry-pick workflows, especially when handling conflicts between protected release branches. Please find the detailed explanation below for your investigation and guidance.


---

Context Overview:

We use GitLab UI's cherry-pick feature to move commits from one protected release branch (let's call it Protected Branch 1) to another protected release branch (Protected Branch 2).

This approach works fine in most cases and is actively used by 50+ developers in our team.

However, we’re facing inconsistent behavior and false positives in two specific conflict-related scenarios, described below.



---

Problem 1: False Positive File Changes in Merge Request after Cherry-Pick Conflict

Scenario:

1. A complete merge from Protected Branch 1 to Protected Branch 2 was performed 20 days ago.


2. Since then, 1000 files were changed via 100 commits on Protected Branch 1.


3. We cherry-picked 99 out of 100 commits into Protected Branch 2 without issue.


4. One commit failed due to a conflict, so we decided to raise a direct merge request from Protected Branch 1 to Protected Branch 2.



Issue:

The merge request shows all 1000 files as modified, even though only 10 files differ (related to the one failed commit).

This results in a false positive and forces reviewers to review irrelevant files.

This behavior is blocking reviews and causing trust issues in GitLab's merge detection logic when conflicts are involved.



---

Problem 2: Missing File Changes During Local Conflict Resolution

Scenario:

1. Due to unresolved conflicts in GitLab UI, a developer created a feature branch from Protected Branch 2 (target branch).


2. They cloned it locally and merged Protected Branch 1 into it.


3. There was a conflict in 2 files and 8 other files were staged automatically.


4. The developer resolved and committed only the 2 conflicted files, discarding the remaining 8 staged files by mistake.


5. They raised a merge request and merged it into Protected Branch 2.



Issue:

Only 2 files were merged, while 8 files were silently discarded, resulting in data/code loss.

There is no trace or warning in GitLab indicating that 8 files were excluded.

Future merge requests from Protected Branch 1 to Protected Branch 2 show no changes, since Git believes they are already in sync.

Code reviewers have no visibility that some files were lost on the developer’s machine and cannot validate correctness of the MR.

We have no way to recover or detect these discarded changes unless re-tracked manually.



---

Our Questions:

1. Why does GitLab show all files as changed (false positives) when only a subset is different after cherry-pick conflicts?


2. How can we ensure that no files are silently lost during local merge conflict resolution and pushed MRs?


3. Is there a recommended approach or GitLab feature that can help reviewers identify such inconsistencies before merging?


4. Can GitLab provide tools or alerts to warn when commits from the source branch were partially excluded in local merges?




---

This issue has caused significant confusion and risk of data loss in our production workflows. We would highly appreciate your guidance on how to manage this properly and ensure accurate merge behavior in conflict-prone environments.

Looking forward to your support and suggestions.

Best regards,
[Your Full Name]
[Your Company / Team Name]
[Your Email Address]
[Optional: GitLab Project URL or Instance Info]


---

Let me know if you'd like to customize any part further.

