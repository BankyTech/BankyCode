**Title: GitLab Ongoing Merge Process Review and Enhancements**

---

**Note:** This document outlines ongoing challenges, current processes, and detailed enhancements for the GitLab merge and approval workflow. It is meant to supplement existing GitLab policy documentation and serves as a central reference for upcoming improvements and process clarifications. For finalized GitLab policies, refer to the main documentation. This version is based on the detailed team discussion held on \[INSERT DATE].

---

## 1. Objective

The primary goal is twofold:

* **Enforce existing merge and approval guidelines** more strictly, as non-compliance continues to introduce significant issues.
* **Address long-standing technical and process limitations**, including problems caused by cherry-picking and unstructured approval workflows.

---

## 2. Summary of Current Issues and Observations

### 2.1 Inconsistent Merge Approvals

* Developers randomly request addition/removal in approver lists without proper authorization.
* Approvals often come from people **not familiar with the code**.
* Cases where reviewers say "I was not aware of the changes" after approving.

### 2.2 Violations in Commit/Merge Standards

* Ignoring naming conventions for scripts and files.
* Invalid or non-uniform file encoding (e.g., UTF-16 with BOM).
* Wrong casing or misplaced files in version directories (e.g., X+2.0 merged into X.0).
* Files merged into incorrect branches or versions.

### 2.3 Repetitive Queries Despite Existing Rejections

* Devs raise the **same basic doubts** repeatedly: commit message format, JIRA ID, branch name pattern.
* Reject messages are **clear and helpful**, but still ignored.
* AI tools or internal teammates could be used to interpret errors before escalating.

---

## 3. Merge Approval Confusion: Detailed Root Cause

### 3.1 Misunderstood Author-Exclusion in Approval

* GitLab enforces a rule that **authors cannot approve their own commits**.
* Problem arises **even if the new MR’s commits are not authored by the approver**, due to prior cherry-picked commits being unmerged by ID.
* If prior commits (authored by the reviewer) from `release` branch were cherry-picked (content merged, but ID not), GitLab still treats the reviewer as **author of pending commits**, thus excluding them from approvers.

### 3.2 Incorrect Assumptions about GitLab’s Cherry Pick UI

* GitLab UI indicates successful cherry-pick visually, giving a **false sense of merge completion**.
* This is **misleading for our workflow**, where content may exist but **commit history is broken**.

---

## 4. Impact of Cherry-Picking Strategy

### 4.1 Real Problems Caused

* Developers cherry-pick partial commits (e.g., 90/100 changes), leading to **missing commit hashes**.
* GitLab can't trace back original commits; it sees them as new, unrelated commits.
* Reviewers get excluded despite being valid, due to **hash mismatch**.
* Cherry-picked commits cannot be reliably tracked in terms of original authorship, affecting approval rules, audits, and history clarity.

### 4.2 Merge Conflicts and Deployment Confusion

* Conflicts increase when branches are not updated holistically.
* Same change is applied multiple times manually, causing drift.
* DB scripts or config files get misaligned, resulting in **production issues**.

---

## 5. Recommended Fix: Full Merging Instead of Cherry-Picking

### 5.1 Solution: Cumulative Merge Strategy

* Always merge from `release-X` into `release-X+1`, then into `develop`, not cherry-pick.
* This ensures **commit history is preserved**, GitLab sees a clean trail.
* Commit authorship and review eligibility are maintained correctly.

### 5.2 Flow (with example):

1. Developer finishes feature in `release-1`.
2. Merge from `release-1` -> `release-2` (retain history).
3. Merge from `release-2` -> `release-3`, then into `develop`.

### 5.3 Scenario Clarification:

* **Cherry-picked version:** `release-1` to `develop` commits are picked, but original hashes lost.
* **Full merge version:** All commits are retained. Approver is not marked as author unless they actually authored the new commits.

---

## 6. Approval Process Restructuring

### 6.1 Defined Approver List Per Team

* Emails will be sent to team leads/managers to confirm designated approvers.
* Only listed individuals will have merge approval rights.
* Approver list updates must come via formal team requests, **not random developer pings**.

### 6.2 Guidelines for Approvers

* Do **not approve** if you're unaware of the code.
* Primary reviewers must understand changes; else escalate.
* Avoid redirecting responsibility (“talk to that dev/team”)—each team must have a clear spokesperson.

### 6.3 Approval Rule Summary (GitLab Settings)

* Authors cannot approve their own code.
* MR authors are removed from approval list automatically.
* If commits are added after an approval, GitLab **removes previous approvals**.
* These rules are pre-configured and visible in GitLab settings.

---

## 7. Developer Responsibility and Hygiene

### 7.1 Commit Hygiene

* Follow defined commit message pattern (with JIRA ID).
* Fix encoding issues: use standard UTF-8 without BOM.
* Maintain script/file naming conventions.
* Use casing and folder structure as agreed.

### 7.2 Reducing Repetitive Queries

* Use team support and internal AI tools to interpret errors.
* Understand reject messages before escalating.
* Avoid basic issues like missing JIRA IDs, invalid branch names.

---

## 8. Current Process vs. Required Discipline

| Topic             | Current Situation                      | Required Action                       |
| ----------------- | -------------------------------------- | ------------------------------------- |
| Cherry Picking    | Overused; creates history conflicts    | Replace with full branch merges       |
| Approver Identity | Confusion due to hidden author linkage | Educate on history-based exclusion    |
| Approval Requests | Informal, random                       | Controlled via lead nominations       |
| File Standards    | Encoding & casing issues               | Strict adherence & review checks      |
| Basic Errors      | Redundant queries on known rejections  | Self-exploration & team support first |

---

## 9. Enhancement Documentation Structure

This document is a **supplement** to the original GitLab Policy document. In Confluence:

* Keep existing policy sections untouched.
* Create a new section titled: `GitLab Ongoing Merge Process Review and Enhancements`
* Link to this section from the top of the main policy page with a note:

  > For ongoing improvements and merge process clarifications as discussed on \[DATE], refer to \[this section].

---

## 10. Conclusion and Follow-up

* These rules are to be **adhered strictly**.
* Where needed, we are also **evolving the system and process**, not just enforcing old rules.
* Training/discussion sessions will be scheduled to ensure clarity.
* Expect 1–2 follow-up sessions based on remaining gaps and team feedback.

---

**End of Document**
